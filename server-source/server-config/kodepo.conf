# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
server {
	listen 8080;
	listen [::]:8080;

	# SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	root /var/www/kodepo;

	# Add index.php to the list if you are using PHP
	index index.html index.htm index.php;

	server_name _;

	# error
	error_page 404 /server/400/404.html;
	
	# otomatik yönlendirme
	location / {
		 try_files $uri $uri/ /index.php;
	}

	# php
	location ~ \.php$ {
		include snippets/fastcgi-php.conf;
		fastcgi_pass unix:/var/run/php/php8.3-fpm.sock; # PHP-FPM soket adresini doğru bir şekilde ayarlayın
		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
		include fastcgi_params;
	}
	
	#temiz görünüm için sayfa yönlendirme .php gizleme
	location ~ /\.php$ {
		rewrite ^/(.*)$ /$1.php last;
	}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	location ~ /\.ht {
		deny all;
	}
	
	# hata sayfası
	error_page 404 /server/400/404.html;
	location = /404 {
		internal;
	}

	# homepage
	location ~* ^/homepage {
		try_files $uri /kodepo.php;
	}

	# codes
	location ~* ^/codes {
		try_files $uri /codes.php;
	}
	
	# users
	location ~* ^/users {
		# arg_user sadece user argümanına bakar
		try_files $uri /users.php?$args;
	}

	# account-settings
	location ~* ^/account {
		try_files $uri /account-settings.php;
	}

	# data-add
	location ~* ^/projects {
		try_files $uri /data-add.php;
	}

	# login/logout/register
	location ~* ^/(login|logout|register) {
		try_files $uri /$uri.php;
	}
}

# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root /var/www/example.com;
#	index index.html;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}

